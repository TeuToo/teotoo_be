name: 백엔드 API CI/CD 

on:
  push:
    branches: [ "deploy" ]
  pull_request:
    branches: [ "deploy" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'


      - name: make application-dev.yaml
        run: |
          mkdir ./src/main/resources
          touch ./src/main/resources/application-dev.yaml
          echo "${{ secrets.PROPERTIES_DEV }}" > ./src/main/resources/application-dev.yaml

      - name: make test application.yaml
        run: |
          touch ./src/test/resources/application.yaml
          echo "${{ secrets.PROPERTIES_TEST }}" > ./src/main/resources/application.yaml


      # Gradle Caching 을 통해서 빌드 과정 시간 단축
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

            
      - name: Create application-dev.yaml
        run: |
          mkdir -p ./src/main/resources 
          echo "spring:" > ./src/main/resources/application-dev.yaml
          echo "  datasource:" >> ./src/main/resources/application-dev.yaml
          echo "    driver-class-name: ${{ secrets.DRIVER_CLASS_NAME }}" >> ./src/main/resources/application-dev.yaml
          echo "    username: ${{ secrets.DB_USERNAME }}" >> ./src/main/resources/application-dev.yaml
          echo "    url: ${{ secrets.DB_URL }}" >> ./src/main/resources/application-dev.yaml
          echo "    password: ${{ secrets.DB_PASSWORD }}" >> ./src/main/resources/application-dev.yaml
          echo "jpa:" >> ./src/main/resources/application-dev.yaml
          echo "  properties:" >> ./src/main/resources/application-dev.yaml
          echo "    hibernate:" >> ./src/main/resources/application-dev.yaml
          echo "      format_sql: true" >> ./src/main/resources/application-dev.yaml
          echo "      default_batch_fetch_size: 1000" >> ./src/main/resources/application-dev.yaml
          echo "  show-sql: true" >> ./src/main/resources/application-dev.yaml
          echo "  hibernate:" >> ./src/main/resources/application-dev.yaml
          echo "    ddl-auto: ${{ secrets.HIBERNATE_DDL_AUTO }}" >> ./src/main/resources/application-dev.yaml
          echo "  open-in-view: false" >> ./src/main/resources/application-dev.yaml
          echo "springdoc:" >> ./src/main/resources/application-dev.yaml
          echo "  default-produces-media-type: application/json;charset=UTF-8" >> ./src/main/resources/application-dev.yaml
          echo "  api-docs:" >> ./src/main/resources/application-dev.yaml
          echo "    path: /api-docs/json" >> ./src/main/resources/application-dev.yaml
          echo "  default-consumes-media-type: application/json;charset=UTF-8" >> ./src/main/resources/application-dev.yaml
          echo "  swagger-ui:" >> ./src/main/resources/application-dev.yaml
          echo "    operations-sorter: alpha" >> ./src/main/resources/application-dev.yaml
          echo "    tags-sorter: alpha" >> ./src/main/resources/application-dev.yaml
          echo "    path: swagger-ui.html" >> ./src/main/resources/application-dev.yaml
          echo "  cache:" >> ./src/main/resources/application-dev.yaml
          echo "    disabled: true" >> ./src/main/resources/application-dev.yaml
          echo "  packages-to-scan: ${{ secrets.PACKAGES_TO_SCAN }}" >> ./src/main/resources/application-dev.yaml
          echo "jwt:" >> ./src/main/resources/application-dev.yaml
          echo "  secret: ${{ secrets.TOKEN_SECRET_KEY }}" >> ./src/main/resources/application-dev.yaml
          echo "  expiration: ${{ secrets.TOKEN_EXPIRATION }}" >> ./src/main/resources/application-dev.yaml
          echo "cloud:" >> ./src/main/resources/application-dev.yaml
          echo "  aws:" >> ./src/main/resources/application-dev.yaml
          echo "    credentials:" >> ./src/main/resources/application-dev.yaml
          echo "      accessKey: ${{ secrets.AWS_ACCESS_KEY }}" >> ./src/main/resources/application-dev.yaml
          echo "      secretKey: ${{ secrets.AWS_SECRET_KEY }}" >> ./src/main/resources/application-dev.yaml
          echo "    s3:" >> ./src/main/resources/application-dev.yaml
          echo "      bucketName: ${{ secrets.S3_BUCKETNAME }}" >> ./src/main/resources/application-dev.yaml
          echo "    region:" >> ./src/main/resources/application-dev.yaml
          echo "      static: ap-northeast-2" >> ./src/main/resources/application-dev.yaml
          echo "    stack:" >> ./src/main/resources/application-dev.yaml
          echo "      auto: false" >> ./src/main/resources/application-dev.yaml
        shell: bash


    # Docker Hub 로그인
      - name: Docker Hub 로그인
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Docker image 빌드
      - name: Docker image 빌드
        run: docker build -t ${{ secrets.DOCKER_IMAGE_NAME }} .


      # Docker image -> Docker Hub 로 푸쉬
      - name: Docker Hub 로 이미지 푸쉬
        run: docker push ${{ secrets.DOCKER_IMAGE_NAME }}

      - name: Gradle 설정
        uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 
        
      - name: Gradle 빌드
        run: |
          chmod +x ./gradlew
          ./gradlew build

  deploy:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          
      # SSH 로 EC2 instance 접근, 가장 최신 버전 Docker image pull 받고 Docker Compose 를 사용해서 빌드
      - name: SSH into EC2 and deploy Docker image using Docker Compose
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            docker pull ${{ secrets.DOCKER_IMAGE_NAME }}
            cd /srv/teutoo-server/bin
            docker-compose stop; docker-compose rm -f; docker-compose up -d
          
  notify:
    needs: deploy
    runs-on: ubuntu-latest
    if: always() # 'deploy' 작업의 결과와 상관없이 항상 실행
    steps:
      - name: Check Deployment Result
        id: check_result
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "::set-output name=status::success"
          else
            echo "::set-output name=status::failure"
          fi
      - name: Notify Success to Discord
        if: steps.check_result.outputs.status == 'success'
        uses: sarisia/actions-status-discord@v1.13.1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          status: "success"
          title: "배포 성공"
          description: "성공적으로 배포 완료했습니다."
          color: "00FF00" # 성공 시 녹색
          #url: "https://naver.com" 필요할 시 추가
      - name: Notify Failure to Discord
        if: steps.check_result.outputs.status == 'failure'
        uses: sarisia/actions-status-discord@v1.13.1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          status: "failure"
          title: "배포 실패"
          description: "배포 실패했습니다. 원인 분석 후 수정해 주세요."
          color: "FF0000" # 실패 시 빨간색
        
